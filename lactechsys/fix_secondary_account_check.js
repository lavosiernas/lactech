// FUN√á√ÉO MELHORADA PARA VERIFICAR CONTA SECUND√ÅRIA
// Esta vers√£o tem melhor tratamento de erro e fallbacks

// Fun√ß√£o melhorada para verificar se o usu√°rio atual √© uma conta secund√°ria
async function checkIfSecondaryAccountImproved() {
    try {
        console.log('üîç Verificando se √© conta secund√°ria...');
        
        const { data: { user }, error: authError } = await supabase.auth.getUser();
        if (authError || !user) {
            console.log('‚ö†Ô∏è Usu√°rio n√£o autenticado, assumindo conta principal');
            return false;
        }
        
        console.log('üë§ Usu√°rio autenticado:', user.email);
        
        // Primeiro, verificar se a tabela secondary_accounts existe
        try {
            const { data: tableCheck, error: tableError } = await supabase
                .from('secondary_accounts')
                .select('id')
                .limit(1);
            
            if (tableError) {
                console.log('‚ö†Ô∏è Tabela secondary_accounts n√£o existe ou n√£o est√° acess√≠vel');
                console.log('üìã Erro:', tableError);
                return false;
            }
            
            console.log('‚úÖ Tabela secondary_accounts acess√≠vel');
            
        } catch (error) {
            console.log('‚ùå Erro ao verificar tabela secondary_accounts:', error);
            return false;
        }
        
        // Agora verificar se existe uma rela√ß√£o na tabela secondary_accounts
        try {
            const { data: relation, error: relError } = await supabase
                .from('secondary_accounts')
                .select('primary_account_id')
                .eq('secondary_account_id', user.id)
                .single();
            
            if (relError) {
                if (relError.code === 'PGRST116') {
                    // Nenhum resultado encontrado - n√£o √© conta secund√°ria
                    console.log('‚úÖ Usu√°rio n√£o √© conta secund√°ria (nenhuma rela√ß√£o encontrada)');
                    return false;
                } else {
                    console.log('‚ùå Erro ao verificar rela√ß√£o:', relError);
                    return false;
                }
            }
            
            if (relation && relation.primary_account_id) {
                console.log('‚úÖ Usu√°rio √© conta secund√°ria');
                console.log('üìã ID da conta principal:', relation.primary_account_id);
                return true;
            }
            
            console.log('‚ö†Ô∏è Rela√ß√£o encontrada mas sem primary_account_id');
            return false;
            
        } catch (error) {
            console.log('‚ùå Erro ao verificar rela√ß√£o de conta secund√°ria:', error);
            return false;
        }
        
    } catch (error) {
        console.error('‚ùå Erro geral ao verificar conta secund√°ria:', error);
        return false;
    }
}

// Fun√ß√£o para testar a verifica√ß√£o
async function testSecondaryAccountCheck() {
    console.log('üß™ TESTANDO VERIFICA√á√ÉO DE CONTA SECUND√ÅRIA');
    
    try {
        const isSecondary = await checkIfSecondaryAccountImproved();
        
        console.log(`üìä RESULTADO: ${isSecondary ? '√â CONTA SECUND√ÅRIA' : '√â CONTA PRINCIPAL'}`);
        
        if (isSecondary) {
            console.log('üîµ Comportamento esperado:');
            console.log('   - Se√ß√µes principais devem estar OCULTAS');
            console.log('   - Se√ß√£o de retorno deve estar VIS√çVEL');
        } else {
            console.log('üü¢ Comportamento esperado:');
            console.log('   - Se√ß√µes principais devem estar VIS√çVEIS');
            console.log('   - Se√ß√£o de retorno deve estar OCULTA');
        }
        
        return isSecondary;
        
    } catch (error) {
        console.error('‚ùå Erro no teste:', error);
        return false;
    }
}

// Fun√ß√£o para substituir a fun√ß√£o original
function replaceSecondaryAccountCheck() {
    if (typeof window !== 'undefined') {
        // Substituir a fun√ß√£o original pela melhorada
        window.checkIfSecondaryAccount = checkIfSecondaryAccountImproved;
        
        console.log('‚úÖ Fun√ß√£o checkIfSecondaryAccount substitu√≠da pela vers√£o melhorada');
        
        // Tamb√©m substituir a fun√ß√£o de teste se existir
        if (typeof testSecondaryAccountCheck === 'function') {
            window.testSecondaryAccountCheck = testSecondaryAccountCheck;
            console.log('‚úÖ Fun√ß√£o de teste dispon√≠vel como testSecondaryAccountCheck');
        }
    }
}

// Executar a substitui√ß√£o
replaceSecondaryAccountCheck();

// Fun√ß√£o para diagn√≥stico completo
async function diagnoseSecondaryAccountIssue() {
    console.log('üîß DIAGN√ìSTICO COMPLETO DE CONTA SECUND√ÅRIA');
    
    try {
        // 1. Verificar autentica√ß√£o
        console.log('\n1. Verificando autentica√ß√£o...');
        const { data: { user }, error: authError } = await supabase.auth.getUser();
        
        if (authError) {
            console.error('‚ùå Erro de autentica√ß√£o:', authError);
            return;
        }
        
        if (!user) {
            console.log('‚ö†Ô∏è Usu√°rio n√£o autenticado');
            return;
        }
        
        console.log('‚úÖ Usu√°rio autenticado:', user.email);
        console.log('üìã User ID:', user.id);
        
        // 2. Verificar se a tabela existe
        console.log('\n2. Verificando tabela secondary_accounts...');
        try {
            const { data: tableCheck, error: tableError } = await supabase
                .from('secondary_accounts')
                .select('id')
                .limit(1);
            
            if (tableError) {
                console.error('‚ùå Erro na tabela secondary_accounts:', tableError);
                console.log('üí° Execute o script fix_secondary_accounts_table.sql no Supabase');
                return;
            }
            
            console.log('‚úÖ Tabela secondary_accounts acess√≠vel');
            
        } catch (error) {
            console.error('‚ùå Erro ao verificar tabela:', error);
            return;
        }
        
        // 3. Verificar rela√ß√µes existentes
        console.log('\n3. Verificando rela√ß√µes existentes...');
        try {
            const { data: relations, error: relError } = await supabase
                .from('secondary_accounts')
                .select('*');
            
            if (relError) {
                console.error('‚ùå Erro ao buscar rela√ß√µes:', relError);
                return;
            }
            
            console.log(`üìä Total de rela√ß√µes encontradas: ${relations?.length || 0}`);
            
            if (relations && relations.length > 0) {
                console.log('üìã Rela√ß√µes existentes:');
                relations.forEach((rel, index) => {
                    console.log(`   ${index + 1}. Primary: ${rel.primary_account_id} ‚Üí Secondary: ${rel.secondary_account_id}`);
                });
            } else {
                console.log('üìã Nenhuma rela√ß√£o encontrada na tabela');
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao verificar rela√ß√µes:', error);
        }
        
        // 4. Verificar se o usu√°rio atual √© secund√°rio
        console.log('\n4. Verificando se usu√°rio atual √© secund√°rio...');
        try {
            const { data: userRelation, error: userRelError } = await supabase
                .from('secondary_accounts')
                .select('primary_account_id')
                .eq('secondary_account_id', user.id)
                .single();
            
            if (userRelError) {
                if (userRelError.code === 'PGRST116') {
                    console.log('‚úÖ Usu√°rio N√ÉO √© conta secund√°ria (nenhuma rela√ß√£o encontrada)');
                } else {
                    console.error('‚ùå Erro ao verificar rela√ß√£o do usu√°rio:', userRelError);
                }
            } else {
                console.log('‚úÖ Usu√°rio √â conta secund√°ria');
                console.log('üìã Conta principal ID:', userRelation.primary_account_id);
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao verificar rela√ß√£o do usu√°rio:', error);
        }
        
        console.log('\nüîß DIAGN√ìSTICO CONCLU√çDO');
        
    } catch (error) {
        console.error('‚ùå Erro no diagn√≥stico:', error);
    }
}

// Fun√ß√£o para executar diagn√≥stico
if (typeof window !== 'undefined') {
    window.diagnoseSecondaryAccountIssue = diagnoseSecondaryAccountIssue;
    console.log('‚úÖ Fun√ß√£o de diagn√≥stico dispon√≠vel como diagnoseSecondaryAccountIssue');
} 