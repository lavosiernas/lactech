// INCLUIR MELHORIAS DE CONTA SECUND√ÅRIA
// Este script inclui as fun√ß√µes melhoradas nas p√°ginas

console.log('üîß INCLUINDO MELHORIAS DE CONTA SECUND√ÅRIA');

// Fun√ß√£o melhorada para verificar se o usu√°rio atual √© uma conta secund√°ria
async function checkIfSecondaryAccountImproved() {
    try {
        console.log('üîç Verificando se √© conta secund√°ria...');
        
        const { data: { user }, error: authError } = await supabase.auth.getUser();
        if (authError || !user) {
            console.log('‚ö†Ô∏è Usu√°rio n√£o autenticado, assumindo conta principal');
            return false;
        }
        
        console.log('üë§ Usu√°rio autenticado:', user.email);
        
        // Primeiro, verificar se a tabela secondary_accounts existe
        try {
            const { data: tableCheck, error: tableError } = await supabase
                .from('secondary_accounts')
                .select('id')
                .limit(1);
            
            if (tableError) {
                console.log('‚ö†Ô∏è Tabela secondary_accounts n√£o existe ou n√£o est√° acess√≠vel');
                console.log('üìã Erro:', tableError);
                return false;
            }
            
            console.log('‚úÖ Tabela secondary_accounts acess√≠vel');
            
        } catch (error) {
            console.log('‚ùå Erro ao verificar tabela secondary_accounts:', error);
            return false;
        }
        
        // Agora verificar se existe uma rela√ß√£o na tabela secondary_accounts
        try {
            const { data: relation, error: relError } = await supabase
                .from('secondary_accounts')
                .select('primary_account_id')
                .eq('secondary_account_id', user.id)
                .single();
            
            if (relError) {
                if (relError.code === 'PGRST116') {
                    // Nenhum resultado encontrado - n√£o √© conta secund√°ria
                    console.log('‚úÖ Usu√°rio n√£o √© conta secund√°ria (nenhuma rela√ß√£o encontrada)');
                    return false;
                } else {
                    console.log('‚ùå Erro ao verificar rela√ß√£o:', relError);
                    return false;
                }
            }
            
            if (relation && relation.primary_account_id) {
                console.log('‚úÖ Usu√°rio √© conta secund√°ria');
                console.log('üìã ID da conta principal:', relation.primary_account_id);
                return true;
            }
            
            console.log('‚ö†Ô∏è Rela√ß√£o encontrada mas sem primary_account_id');
            return false;
            
        } catch (error) {
            console.log('‚ùå Erro ao verificar rela√ß√£o de conta secund√°ria:', error);
            return false;
        }
        
    } catch (error) {
        console.error('‚ùå Erro geral ao verificar conta secund√°ria:', error);
        return false;
    }
}

// Fun√ß√£o melhorada para gerenciar a visibilidade das se√ß√µes do perfil
async function manageProfileSectionsImproved() {
    try {
        console.log('üéõÔ∏è Gerenciando se√ß√µes do perfil...');
        
        const isSecondary = await checkIfSecondaryAccountImproved();
        
        // Elementos para contas principais (veterin√°rio)
        const professionalInfoSection = document.getElementById('professionalInfoSection');
        const personalInfoSection = document.getElementById('personalInfoSection');
        const changePasswordSection = document.getElementById('changePasswordSection');
        const dangerZoneSection = document.getElementById('dangerZoneSection');
        
        // Elementos para contas secund√°rias
        const primaryAccountSection = document.getElementById('primaryAccountSection');
        
        if (isSecondary) {
            // Se √© conta secund√°ria, ocultar se√ß√µes principais e mostrar se√ß√£o de retorno
            if (professionalInfoSection) {
                professionalInfoSection.style.display = 'none';
                console.log('üìã Se√ß√£o professionalInfoSection ocultada');
            }
            if (personalInfoSection) {
                personalInfoSection.style.display = 'none';
                console.log('üìã Se√ß√£o personalInfoSection ocultada');
            }
            if (changePasswordSection) {
                changePasswordSection.style.display = 'none';
                console.log('üìã Se√ß√£o changePasswordSection ocultada');
            }
            if (dangerZoneSection) {
                dangerZoneSection.style.display = 'none';
                console.log('üìã Se√ß√£o dangerZoneSection ocultada');
            }
            if (primaryAccountSection) {
                primaryAccountSection.style.display = 'block';
                console.log('üìã Se√ß√£o primaryAccountSection mostrada');
            }
            
            console.log('‚úÖ Perfil configurado para conta secund√°ria');
        } else {
            // Se √© conta principal, mostrar se√ß√µes principais e ocultar se√ß√£o de retorno
            if (professionalInfoSection) {
                professionalInfoSection.style.display = 'block';
                console.log('üìã Se√ß√£o professionalInfoSection mostrada');
            }
            if (personalInfoSection) {
                personalInfoSection.style.display = 'block';
                console.log('üìã Se√ß√£o personalInfoSection mostrada');
            }
            if (changePasswordSection) {
                changePasswordSection.style.display = 'block';
                console.log('üìã Se√ß√£o changePasswordSection mostrada');
            }
            if (dangerZoneSection) {
                dangerZoneSection.style.display = 'block';
                console.log('üìã Se√ß√£o dangerZoneSection mostrada');
            }
            if (primaryAccountSection) {
                primaryAccountSection.style.display = 'none';
                console.log('üìã Se√ß√£o primaryAccountSection ocultada');
            }
            
            console.log('‚úÖ Perfil configurado para conta principal');
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao gerenciar se√ß√µes do perfil:', error);
    }
}

// Fun√ß√£o melhorada para retornar para a conta principal
async function switchToPrimaryAccountImproved() {
    try {
        console.log('üîÑ Iniciando retorno para conta principal...');
        
        const { data: { user }, error: authError } = await supabase.auth.getUser();
        if (authError || !user) {
            alert('Usu√°rio n√£o autenticado');
            return;
        }
        
        console.log('üë§ Usu√°rio atual:', user.email);
        
        // Buscar a rela√ß√£o de conta secund√°ria
        const { data: relation, error: relError } = await supabase
            .from('secondary_accounts')
            .select('primary_account_id')
            .eq('secondary_account_id', user.id)
            .single();
        
        if (relError) {
            console.error('‚ùå Erro ao encontrar conta principal:', relError);
            alert('Erro ao encontrar conta principal');
            return;
        }
        
        if (!relation || !relation.primary_account_id) {
            console.error('‚ùå Rela√ß√£o de conta secund√°ria n√£o encontrada');
            alert('Rela√ß√£o de conta secund√°ria n√£o encontrada');
            return;
        }
        
        console.log('üìã ID da conta principal:', relation.primary_account_id);
        
        // Buscar dados da conta principal
        const { data: primaryAccount, error: primaryError } = await supabase
            .from('users')
            .select('*')
            .eq('id', relation.primary_account_id)
            .single();
        
        if (primaryError || !primaryAccount) {
            console.error('‚ùå Erro ao carregar dados da conta principal:', primaryError);
            alert('Erro ao carregar dados da conta principal');
            return;
        }
        
        console.log('‚úÖ Dados da conta principal carregados:', primaryAccount.email);
        
        // Armazenar dados da conta secund√°ria atual
        const currentSession = {
            id: user.id,
            email: user.email,
            name: user.name,
            user_type: user.user_metadata?.role || 'veterinario',
            farm_id: user.user_metadata?.farm_id || '',
            farm_name: sessionStorage.getItem('farm_name') || ''
        };
        
        // Armazenar dados da conta principal
        const primarySession = {
            id: primaryAccount.id,
            email: primaryAccount.email,
            name: primaryAccount.name,
            user_type: primaryAccount.role,
            farm_id: primaryAccount.farm_id,
            farm_name: sessionStorage.getItem('farm_name') || ''
        };
        
        // Salvar sess√£o atual para retorno posterior
        sessionStorage.setItem('secondary_account', JSON.stringify(currentSession));
        console.log('üíæ Sess√£o secund√°ria salva');
        
        // Definir nova sess√£o como conta principal
        sessionStorage.setItem('user', JSON.stringify(primarySession));
        console.log('üíæ Sess√£o principal definida');
        
        console.log('üîÑ Redirecionando para gerente.html...');
        
        // Redirecionar para a p√°gina do gerente
        window.location.href = 'gerente.html';
        
    } catch (error) {
        console.error('‚ùå Erro ao retornar para conta principal:', error);
        alert('Ocorreu um erro ao retornar para a conta principal.');
    }
}

// Fun√ß√£o para substituir as fun√ß√µes originais
function replaceSecondaryAccountFunctions() {
    if (typeof window !== 'undefined') {
        // Substituir fun√ß√µes originais pelas melhoradas
        window.checkIfSecondaryAccount = checkIfSecondaryAccountImproved;
        window.manageProfileSections = manageProfileSectionsImproved;
        window.switchToPrimaryAccount = switchToPrimaryAccountImproved;
        
        console.log('‚úÖ Fun√ß√µes de conta secund√°ria substitu√≠das pelas vers√µes melhoradas');
        
        // Fun√ß√µes de teste dispon√≠veis
        window.testSecondaryAccountCheck = async () => {
            const isSecondary = await checkIfSecondaryAccountImproved();
            console.log(`üìä RESULTADO: ${isSecondary ? '√â CONTA SECUND√ÅRIA' : '√â CONTA PRINCIPAL'}`);
            return isSecondary;
        };
        
        window.diagnoseSecondaryAccountIssue = async () => {
            console.log('üîß DIAGN√ìSTICO DE CONTA SECUND√ÅRIA');
            console.log('1. Verificando autentica√ß√£o...');
            
            const { data: { user }, error: authError } = await supabase.auth.getUser();
            if (authError || !user) {
                console.error('‚ùå Erro de autentica√ß√£o:', authError);
                return;
            }
            
            console.log('‚úÖ Usu√°rio autenticado:', user.email);
            console.log('üìã User ID:', user.id);
            
            console.log('2. Verificando tabela secondary_accounts...');
            try {
                const { data: tableCheck, error: tableError } = await supabase
                    .from('secondary_accounts')
                    .select('id')
                    .limit(1);
                
                if (tableError) {
                    console.error('‚ùå Erro na tabela secondary_accounts:', tableError);
                    console.log('üí° Execute o script fix_secondary_accounts_table.sql no Supabase');
                    return;
                }
                
                console.log('‚úÖ Tabela secondary_accounts acess√≠vel');
                
                console.log('3. Verificando rela√ß√£o do usu√°rio...');
                const { data: relation, error: relError } = await supabase
                    .from('secondary_accounts')
                    .select('primary_account_id')
                    .eq('secondary_account_id', user.id)
                    .single();
                
                if (relError) {
                    if (relError.code === 'PGRST116') {
                        console.log('‚úÖ Usu√°rio N√ÉO √© conta secund√°ria');
                    } else {
                        console.error('‚ùå Erro ao verificar rela√ß√£o:', relError);
                    }
                } else {
                    console.log('‚úÖ Usu√°rio √â conta secund√°ria');
                    console.log('üìã Conta principal ID:', relation.primary_account_id);
                }
                
            } catch (error) {
                console.error('‚ùå Erro no diagn√≥stico:', error);
            }
            
            console.log('üîß DIAGN√ìSTICO CONCLU√çDO');
        };
        
        console.log('‚úÖ Fun√ß√µes de teste dispon√≠veis:');
        console.log('   - testSecondaryAccountCheck()');
        console.log('   - diagnoseSecondaryAccountIssue()');
    }
}

// Executar a substitui√ß√£o
replaceSecondaryAccountFunctions();

console.log('‚úÖ MELHORIAS DE CONTA SECUND√ÅRIA INCLU√çDAS'); 