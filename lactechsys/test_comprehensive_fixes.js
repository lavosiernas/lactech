// TESTE COMPREENSIVO DE TODAS AS CORRE√á√ïES
// Este script testa: RLS, fun√ß√µes "Carregando...", e altera√ß√£o de conta secund√°ria

console.log('üöÄ INICIANDO TESTE COMPREENSIVO DE TODAS AS CORRE√á√ïES');

// 1. TESTAR RLS E CONEX√ïES
async function testRLSAndConnections() {
    console.log('\n=== 1. TESTANDO RLS E CONEX√ïES ===');
    
    try {
        // Testar autentica√ß√£o
        const { data: { user }, error: authError } = await supabase.auth.getUser();
        if (authError || !user) {
            console.error('‚ùå Erro de autentica√ß√£o:', authError);
            return false;
        }
        console.log('‚úÖ Autentica√ß√£o OK:', user.email);
        
        // Testar consultas b√°sicas
        const tables = ['users', 'farms', 'animals', 'milk_production', 'quality_tests'];
        for (const table of tables) {
            try {
                const { data, error } = await supabase
                    .from(table)
                    .select('*')
                    .limit(1);
                
                if (error) {
                    console.error(`‚ùå Erro na tabela ${table}:`, error);
                } else {
                    console.log(`‚úÖ Tabela ${table}: OK`);
                }
            } catch (error) {
                console.error(`‚ùå Exce√ß√£o na tabela ${table}:`, error);
            }
        }
        
        return true;
    } catch (error) {
        console.error('‚ùå Erro geral no teste de RLS:', error);
        return false;
    }
}

// 2. TESTAR FUN√á√ïES DE CARREGAMENTO
async function testLoadingFunctions() {
    console.log('\n=== 2. TESTANDO FUN√á√ïES DE CARREGAMENTO ===');
    
    try {
        // Testar fun√ß√µes melhoradas
        if (typeof loadUserProfileImproved === 'function') {
            console.log('‚úÖ Fun√ß√£o loadUserProfileImproved dispon√≠vel');
            await loadUserProfileImproved();
        } else {
            console.log('‚ö†Ô∏è Fun√ß√£o loadUserProfileImproved n√£o encontrada, testando original');
            if (typeof loadUserProfile === 'function') {
                await loadUserProfile();
            }
        }
        
        if (typeof setFarmNameImproved === 'function') {
            console.log('‚úÖ Fun√ß√£o setFarmNameImproved dispon√≠vel');
            await setFarmNameImproved();
        } else {
            console.log('‚ö†Ô∏è Fun√ß√£o setFarmNameImproved n√£o encontrada, testando original');
            if (typeof setFarmName === 'function') {
                await setFarmName();
            }
        }
        
        if (typeof setManagerNameImproved === 'function') {
            console.log('‚úÖ Fun√ß√£o setManagerNameImproved dispon√≠vel');
            await setManagerNameImproved();
        } else {
            console.log('‚ö†Ô∏è Fun√ß√£o setManagerNameImproved n√£o encontrada, testando original');
            if (typeof setManagerName === 'function') {
                await setManagerName();
            }
        }
        
        console.log('‚úÖ Fun√ß√µes de carregamento testadas');
        
    } catch (error) {
        console.error('‚ùå Erro nas fun√ß√µes de carregamento:', error);
    }
}

// 3. TESTAR ELEMENTOS DOM
async function testDOMElements() {
    console.log('\n=== 3. TESTANDO ELEMENTOS DOM ===');
    
    const elements = [
        'farmNameHeader',
        'managerName',
        'managerWelcome',
        'profileName',
        'profileFullName',
        'profileFarmName',
        'profileEmail2',
        'profileWhatsApp'
    ];
    
    let loadedCount = 0;
    let loadingCount = 0;
    
    for (const elementId of elements) {
        const element = document.getElementById(elementId);
        if (element) {
            const text = element.textContent;
            if (text === 'Carregando...') {
                console.log(`‚ö†Ô∏è Elemento ${elementId}: ainda mostra "Carregando..."`);
                loadingCount++;
            } else {
                console.log(`‚úÖ Elemento ${elementId}: "${text}"`);
                loadedCount++;
            }
        } else {
            console.log(`‚ùå Elemento ${elementId}: n√£o encontrado`);
        }
    }
    
    console.log(`üìä RESUMO: ${loadedCount} elementos carregados, ${loadingCount} ainda carregando`);
    
    return loadingCount === 0;
}

// 4. TESTAR FUN√á√ïES DE CONTA SECUND√ÅRIA
async function testSecondaryAccountFunctions() {
    console.log('\n=== 4. TESTANDO FUN√á√ïES DE CONTA SECUND√ÅRIA ===');
    
    try {
        // Testar verifica√ß√£o de conta secund√°ria
        if (typeof checkIfSecondaryAccount === 'function') {
            const isSecondary = await checkIfSecondaryAccount();
            console.log(`‚úÖ Verifica√ß√£o de conta secund√°ria: ${isSecondary ? '√â secund√°ria' : 'N√£o √© secund√°ria'}`);
            
            // Testar se√ß√£o de altera√ß√£o
            if (typeof showAlterSecondaryAccountSection === 'function') {
                await showAlterSecondaryAccountSection();
                console.log('‚úÖ Se√ß√£o de altera√ß√£o de conta secund√°ria testada');
            }
            
            // Testar carregamento de dados atuais
            if (typeof loadCurrentSecondaryAccountData === 'function') {
                await loadCurrentSecondaryAccountData();
                console.log('‚úÖ Carregamento de dados atuais testado');
            }
        } else {
            console.log('‚ö†Ô∏è Fun√ß√µes de conta secund√°ria n√£o encontradas');
        }
        
        console.log('‚úÖ Fun√ß√µes de conta secund√°ria testadas');
        
    } catch (error) {
        console.error('‚ùå Erro nas fun√ß√µes de conta secund√°ria:', error);
    }
}

// 5. TESTAR ELEMENTOS DE CONTA SECUND√ÅRIA
async function testSecondaryAccountElements() {
    console.log('\n=== 5. TESTANDO ELEMENTOS DE CONTA SECUND√ÅRIA ===');
    
    const secondaryElements = [
        'alterSecondaryAccountSection',
        'alterSecondaryAccountBtn',
        'secondaryAccountForm',
        'secondaryAccountName',
        'secondaryAccountRole',
        'secondaryAccountActive'
    ];
    
    for (const elementId of secondaryElements) {
        const element = document.getElementById(elementId);
        if (element) {
            console.log(`‚úÖ Elemento ${elementId}: encontrado`);
        } else {
            console.log(`‚ùå Elemento ${elementId}: n√£o encontrado`);
        }
    }
}

// 6. TESTAR FUN√á√ïES ESPEC√çFICAS DO GERENTE
async function testManagerSpecificFunctions() {
    console.log('\n=== 6. TESTANDO FUN√á√ïES ESPEC√çFICAS DO GERENTE ===');
    
    try {
        // Testar carregamento de dados de usu√°rios
        if (typeof loadUsersData === 'function') {
            await loadUsersData();
            console.log('‚úÖ loadUsersData executado');
        }
        
        // Testar carregamento de dados do dashboard
        if (typeof loadDashboardData === 'function') {
            await loadDashboardData();
            console.log('‚úÖ loadDashboardData executado');
        }
        
        // Testar carregamento de dados de volume
        if (typeof loadVolumeData === 'function') {
            await loadVolumeData();
            console.log('‚úÖ loadVolumeData executado');
        }
        
        console.log('‚úÖ Fun√ß√µes espec√≠ficas do gerente testadas');
        
    } catch (error) {
        console.error('‚ùå Erro nas fun√ß√µes espec√≠ficas do gerente:', error);
    }
}

// 7. TESTAR CONSULTAS ESPEC√çFICAS
async function testSpecificQueries() {
    console.log('\n=== 7. TESTANDO CONSULTAS ESPEC√çFICAS ===');
    
    try {
        const { data: { user } } = await supabase.auth.getUser();
        if (user) {
            // Testar consulta de usu√°rio por email
            const { data: userData, error: userError } = await supabase
                .from('users')
                .select('farm_id, name, email')
                .eq('email', user.email)
                .single();
            
            if (userError) {
                console.error('‚ùå Erro na consulta de usu√°rio:', userError);
            } else {
                console.log('‚úÖ Consulta de usu√°rio OK:', userData);
                
                // Testar consulta de fazenda se farm_id existir
                if (userData?.farm_id) {
                    const { data: farmData, error: farmError } = await supabase
                        .from('farms')
                        .select('name')
                        .eq('id', userData.farm_id)
                        .single();
                    
                    if (farmError) {
                        console.error('‚ùå Erro na consulta de fazenda:', farmError);
                    } else {
                        console.log('‚úÖ Consulta de fazenda OK:', farmData);
                    }
                }
            }
        }
        
    } catch (error) {
        console.error('‚ùå Erro nas consultas espec√≠ficas:', error);
    }
}

// FUN√á√ÉO PRINCIPAL DE TESTE
async function runComprehensiveTest() {
    console.log('üöÄ INICIANDO TESTE COMPREENSIVO...');
    
    // Aguardar um pouco para garantir que a p√°gina carregou
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    const results = {
        rls: false,
        loading: false,
        dom: false,
        secondary: false,
        elements: false,
        manager: false,
        queries: false
    };
    
    // Executar todos os testes
    results.rls = await testRLSAndConnections();
    await testLoadingFunctions();
    results.dom = await testDOMElements();
    await testSecondaryAccountFunctions();
    await testSecondaryAccountElements();
    await testManagerSpecificFunctions();
    await testSpecificQueries();
    
    // Resumo final
    console.log('\n=== üìä RESUMO FINAL ===');
    console.log(`RLS e Conex√µes: ${results.rls ? '‚úÖ OK' : '‚ùå FALHOU'}`);
    console.log(`Elementos DOM: ${results.dom ? '‚úÖ OK' : '‚ùå FALHOU'}`);
    console.log('Fun√ß√µes de Carregamento: ‚úÖ Testadas');
    console.log('Fun√ß√µes de Conta Secund√°ria: ‚úÖ Testadas');
    console.log('Elementos de Conta Secund√°ria: ‚úÖ Testados');
    console.log('Fun√ß√µes do Gerente: ‚úÖ Testadas');
    console.log('Consultas Espec√≠ficas: ‚úÖ Testadas');
    
    if (results.rls && results.dom) {
        console.log('\nüéâ SISTEMA FUNCIONANDO CORRETAMENTE!');
    } else {
        console.log('\n‚ö†Ô∏è ALGUNS PROBLEMAS DETECTADOS - Verifique os logs acima');
    }
}

// Executar o teste
runComprehensiveTest(); 