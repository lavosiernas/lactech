/**
 * Script para verificar elementos DOM necess√°rios para contas secund√°rias
 * Execute este script no console do navegador
 */

function checkSecondaryAccountElements() {
    console.log('üîç Verificando elementos DOM para contas secund√°rias...');
    
    const elements = {
        // Elementos do formul√°rio
        'secondaryAccountForm': 'Formul√°rio de conta secund√°ria',
        'secondaryAccountName': 'Campo nome da conta secund√°ria',
        'secondaryAccountRole': 'Campo fun√ß√£o da conta secund√°ria',
        'secondaryAccountActive': 'Checkbox ativo da conta secund√°ria',
        
        // Elementos de status
        'noSecondaryAccount': 'Div "sem conta secund√°ria"',
        'hasSecondaryAccount': 'Div "com conta secund√°ria"',
        'secondaryAccountNameDisplay': 'Display do nome da conta secund√°ria',
        'switchAccountBtn': 'Bot√£o de alternar conta',
        
        // Elementos de configura√ß√£o
        'configSecondaryBtn': 'Bot√£o configurar conta secund√°ria',
        
        // Elementos de cards
        'accountCards': 'Container de cards de contas'
    };
    
    const results = {};
    let allElementsExist = true;
    
    for (const [id, description] of Object.entries(elements)) {
        const element = document.getElementById(id);
        const exists = element !== null;
        results[id] = {
            exists,
            description,
            element: element
        };
        
        if (!exists) {
            allElementsExist = false;
        }
        
        console.log(`${exists ? '‚úÖ' : '‚ùå'} ${id}: ${description}`);
    }
    
    console.log('\nüìä RESUMO:');
    console.log(`Elementos encontrados: ${Object.values(results).filter(r => r.exists).length}/${Object.keys(results).length}`);
    
    if (allElementsExist) {
        console.log('üéâ Todos os elementos necess√°rios est√£o presentes!');
    } else {
        console.log('‚ö†Ô∏è Alguns elementos est√£o faltando:');
        Object.entries(results).forEach(([id, result]) => {
            if (!result.exists) {
                console.log(`   - ${id}: ${result.description}`);
            }
        });
    }
    
    return results;
}

// Fun√ß√£o para testar a cria√ß√£o de conta secund√°ria
function testSecondaryAccountCreation() {
    console.log('üß™ Testando cria√ß√£o de conta secund√°ria...');
    
    // Verificar se estamos na p√°gina correta
    if (!document.getElementById('secondaryAccountForm')) {
        console.error('‚ùå N√£o estamos na p√°gina de gerente ou elementos n√£o carregaram');
        return;
    }
    
    // Simular preenchimento do formul√°rio
    const nameField = document.getElementById('secondaryAccountName');
    const roleField = document.getElementById('secondaryAccountRole');
    const activeField = document.getElementById('secondaryAccountActive');
    
    if (nameField && roleField && activeField) {
        console.log('‚úÖ Campos do formul√°rio encontrados');
        
        // Simular preenchimento
        nameField.value = 'Teste Funcion√°rio';
        roleField.value = 'funcionario';
        activeField.checked = true;
        
        console.log('üìù Formul√°rio preenchido com dados de teste');
        console.log('üí° Para testar a cria√ß√£o real, clique em "Salvar Configura√ß√µes"');
    } else {
        console.error('‚ùå Campos do formul√°rio n√£o encontrados');
    }
}

// Fun√ß√£o para verificar se o usu√°rio est√° autenticado
async function checkAuthentication() {
    console.log('üîê Verificando autentica√ß√£o...');
    
    try {
        const { data: { user } } = await supabase.auth.getUser();
        
        if (user) {
            console.log('‚úÖ Usu√°rio autenticado:', user.email);
            
            // Verificar dados do usu√°rio
            const { data: userData, error } = await supabase
                .from('users')
                .select('name, role, farm_id')
                .eq('id', user.id)
                .single();
                
            if (error) {
                console.error('‚ùå Erro ao buscar dados do usu√°rio:', error);
            } else {
                console.log('üìä Dados do usu√°rio:', userData);
            }
        } else {
            console.error('‚ùå Usu√°rio n√£o autenticado');
        }
    } catch (error) {
        console.error('‚ùå Erro ao verificar autentica√ß√£o:', error);
    }
}

// Fun√ß√£o para testar todas as funcionalidades
async function runFullTest() {
    console.log('üöÄ Iniciando teste completo...\n');
    
    // 1. Verificar autentica√ß√£o
    await checkAuthentication();
    console.log('');
    
    // 2. Verificar elementos DOM
    checkSecondaryAccountElements();
    console.log('');
    
    // 3. Testar cria√ß√£o de conta secund√°ria
    testSecondaryAccountCreation();
    
    console.log('\nüéâ Teste completo finalizado!');
}

// Exportar fun√ß√µes
window.checkSecondaryAccountElements = checkSecondaryAccountElements;
window.testSecondaryAccountCreation = testSecondaryAccountCreation;
window.checkAuthentication = checkAuthentication;
window.runFullTest = runFullTest;

console.log('üß™ Script de verifica√ß√£o de elementos DOM carregado!');
console.log('Comandos dispon√≠veis:');
console.log('- checkSecondaryAccountElements() - Verificar elementos DOM');
console.log('- testSecondaryAccountCreation() - Testar cria√ß√£o de conta');
console.log('- checkAuthentication() - Verificar autentica√ß√£o');
console.log('- runFullTest() - Executar teste completo'); 