// TESTE COMPREENSIVO DO RLS E FUN√á√ïES DE CARREGAMENTO
// Este script testa se o RLS est√° funcionando e se as fun√ß√µes "Carregando..." est√£o carregando dados

console.log('=== INICIANDO TESTE COMPREENSIVO DO RLS ===');

// 1. TESTAR CONEX√ÉO COM SUPABASE
async function testSupabaseConnection() {
    try {
        console.log('1. Testando conex√£o com Supabase...');
        const { data: { user }, error } = await supabase.auth.getUser();
        
        if (error) {
            console.error('‚ùå Erro na autentica√ß√£o:', error);
            return false;
        }
        
        if (!user) {
            console.error('‚ùå Usu√°rio n√£o autenticado');
            return false;
        }
        
        console.log('‚úÖ Usu√°rio autenticado:', user.email);
        return true;
    } catch (error) {
        console.error('‚ùå Erro na conex√£o:', error);
        return false;
    }
}

// 2. TESTAR CONSULTAS B√ÅSICAS NAS TABELAS
async function testBasicQueries() {
    const tables = [
        'users',
        'farms', 
        'animals',
        'milk_production',
        'quality_tests',
        'animal_health_records',
        'treatments',
        'payments',
        'notifications',
        'user_access_requests',
        'secondary_accounts'
    ];
    
    console.log('2. Testando consultas b√°sicas...');
    
    for (const table of tables) {
        try {
            const { data, error } = await supabase
                .from(table)
                .select('*')
                .limit(1);
            
            if (error) {
                console.error(`‚ùå Erro na tabela ${table}:`, error);
            } else {
                console.log(`‚úÖ Tabela ${table}: OK (${data?.length || 0} registros)`);
            }
        } catch (error) {
            console.error(`‚ùå Exce√ß√£o na tabela ${table}:`, error);
        }
    }
}

// 3. TESTAR FUN√á√ïES DE CARREGAMENTO DE DADOS
async function testDataLoadingFunctions() {
    console.log('3. Testando fun√ß√µes de carregamento...');
    
    try {
        // Testar getFarmName
        console.log('Testando getFarmName...');
        const farmName = await getFarmName();
        console.log('‚úÖ Farm name:', farmName);
        
        // Testar getManagerName
        console.log('Testando getManagerName...');
        const managerName = await getManagerName();
        console.log('‚úÖ Manager name:', managerName);
        
        // Testar loadUserProfile
        console.log('Testando loadUserProfile...');
        await loadUserProfile();
        console.log('‚úÖ User profile carregado');
        
    } catch (error) {
        console.error('‚ùå Erro nas fun√ß√µes de carregamento:', error);
    }
}

// 4. TESTAR ELEMENTOS DOM QUE MOSTRAM "Carregando..."
async function testLoadingElements() {
    console.log('4. Testando elementos DOM...');
    
    const elements = [
        'farmNameHeader',
        'managerName', 
        'managerWelcome',
        'profileName',
        'profileFullName',
        'profileFarmName',
        'profileEmail2',
        'profileWhatsApp'
    ];
    
    for (const elementId of elements) {
        const element = document.getElementById(elementId);
        if (element) {
            const text = element.textContent;
            if (text === 'Carregando...') {
                console.log(`‚ö†Ô∏è Elemento ${elementId}: ainda mostra "Carregando..."`);
            } else {
                console.log(`‚úÖ Elemento ${elementId}: "${text}"`);
            }
        } else {
            console.log(`‚ùå Elemento ${elementId}: n√£o encontrado`);
        }
    }
}

// 5. TESTAR FUN√á√ïES ESPEC√çFICAS DO GERENTE
async function testManagerFunctions() {
    console.log('5. Testando fun√ß√µes espec√≠ficas do gerente...');
    
    try {
        // Testar setFarmName
        await setFarmName();
        console.log('‚úÖ setFarmName executado');
        
        // Testar setManagerName
        await setManagerName();
        console.log('‚úÖ setManagerName executado');
        
        // Testar loadSecondaryAccountData
        await loadSecondaryAccountData();
        console.log('‚úÖ loadSecondaryAccountData executado');
        
    } catch (error) {
        console.error('‚ùå Erro nas fun√ß√µes do gerente:', error);
    }
}

// 6. TESTAR CONSULTAS ESPEC√çFICAS QUE PODEM FALHAR
async function testSpecificQueries() {
    console.log('6. Testando consultas espec√≠ficas...');
    
    try {
        // Testar consulta de usu√°rio por email
        const { data: { user } } = await supabase.auth.getUser();
        if (user) {
            const { data, error } = await supabase
                .from('users')
                .select('farm_id')
                .eq('email', user.email)
                .single();
            
            if (error) {
                console.error('‚ùå Erro na consulta de usu√°rio:', error);
            } else {
                console.log('‚úÖ Consulta de usu√°rio OK:', data);
            }
        }
        
        // Testar consulta de fazenda
        if (user) {
            const { data: userData } = await supabase
                .from('users')
                .select('farm_id')
                .eq('email', user.email)
                .single();
            
            if (userData?.farm_id) {
                const { data: farmData, error } = await supabase
                    .from('farms')
                    .select('name')
                    .eq('id', userData.farm_id)
                    .single();
                
                if (error) {
                    console.error('‚ùå Erro na consulta de fazenda:', error);
                } else {
                    console.log('‚úÖ Consulta de fazenda OK:', farmData);
                }
            }
        }
        
    } catch (error) {
        console.error('‚ùå Erro nas consultas espec√≠ficas:', error);
    }
}

// FUN√á√ÉO PRINCIPAL DE TESTE
async function runComprehensiveTest() {
    console.log('üöÄ INICIANDO TESTE COMPREENSIVO...');
    
    // Aguardar um pouco para garantir que a p√°gina carregou
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Executar todos os testes
    await testSupabaseConnection();
    await testBasicQueries();
    await testDataLoadingFunctions();
    await testLoadingElements();
    await testManagerFunctions();
    await testSpecificQueries();
    
    console.log('‚úÖ TESTE COMPREENSIVO CONCLU√çDO');
    console.log('üìä RESUMO: Verifique os logs acima para identificar problemas');
}

// Executar o teste
runComprehensiveTest(); 