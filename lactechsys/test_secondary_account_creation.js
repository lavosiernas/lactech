/**
 * Script para testar a cria√ß√£o de contas secund√°rias
 * Execute este script no console do navegador
 */

async function testSecondaryAccountCreation() {
    console.log('üß™ Testando cria√ß√£o de conta secund√°ria...');
    
    try {
        // 1. Verificar usu√°rio atual
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) {
            console.error('‚ùå Usu√°rio n√£o autenticado');
            return;
        }
        
        console.log('‚úÖ Usu√°rio autenticado:', user.email);
        
        // 2. Obter dados do usu√°rio
        const { data: userData, error: userError } = await supabase
            .from('users')
            .select('*')
            .eq('id', user.id)
            .single();
            
        if (userError) {
            console.error('‚ùå Erro ao obter dados do usu√°rio:', userError);
            return;
        }
        
        console.log('‚úÖ Dados do usu√°rio obtidos:', userData.name);
        
        // 3. Gerar email para conta secund√°ria
        const secondaryEmail = userData.email + '.func';
        console.log('üìß Email secund√°rio gerado:', secondaryEmail);
        
        // 4. Verificar se j√° existe conta secund√°ria
        const { data: existingAccount, error: checkError } = await supabase
            .from('users')
            .select('*')
            .eq('email', secondaryEmail)
            .eq('farm_id', userData.farm_id)
            .maybeSingle();
            
        if (checkError) {
            console.error('‚ùå Erro ao verificar conta existente:', checkError);
            return;
        }
        
        if (existingAccount) {
            console.log('‚ö†Ô∏è Conta secund√°ria j√° existe:', existingAccount.name);
            console.log('üìä Dados da conta existente:', existingAccount);
            return;
        }
        
        // 5. Simular cria√ß√£o de conta secund√°ria
        console.log('üîÑ Simulando cria√ß√£o de conta secund√°ria...');
        
        const testSecondaryAccount = {
            id: crypto.randomUUID(),
            farm_id: userData.farm_id,
            name: userData.name + ' (Funcion√°rio)',
            email: secondaryEmail,
            role: 'funcionario',
            whatsapp: userData.whatsapp,
            is_active: true,
            profile_photo_url: userData.profile_photo_url
        };
        
        console.log('üìã Dados da conta secund√°ria:', testSecondaryAccount);
        
        // 6. Testar inser√ß√£o (sem executar)
        console.log('‚úÖ Simula√ß√£o conclu√≠da - dados prontos para inser√ß√£o');
        console.log('üí° Para criar a conta real, use o formul√°rio do sistema');
        
        // 7. Verificar restri√ß√µes
        console.log('\nüîç Verificando restri√ß√µes de email...');
        const { data: allUsers, error: allUsersError } = await supabase
            .from('users')
            .select('email, farm_id, name, role')
            .eq('farm_id', userData.farm_id);
            
        if (allUsersError) {
            console.error('‚ùå Erro ao verificar usu√°rios:', allUsersError);
        } else {
            console.log('üìä Usu√°rios na mesma fazenda:', allUsers);
            
            // Verificar se h√° emails duplicados
            const emails = allUsers.map(u => u.email);
            const duplicateEmails = emails.filter((email, index) => emails.indexOf(email) !== index);
            
            if (duplicateEmails.length > 0) {
                console.warn('‚ö†Ô∏è Emails duplicados encontrados:', duplicateEmails);
            } else {
                console.log('‚úÖ Nenhum email duplicado encontrado');
            }
        }
        
        console.log('\nüéâ Teste conclu√≠do!');
        console.log('üìù Para criar uma conta secund√°ria real:');
        console.log('1. V√° para o perfil do usu√°rio');
        console.log('2. Clique em "Configurar" na se√ß√£o Conta Secund√°ria');
        console.log('3. Preencha os dados e salve');
        
    } catch (error) {
        console.error('‚ùå Erro no teste:', error);
    }
}

// Fun√ß√£o para verificar contas secund√°rias existentes
async function checkExistingSecondaryAccounts() {
    console.log('üîç Verificando contas secund√°rias existentes...');
    
    try {
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) return;
        
        const { data: userData } = await supabase
            .from('users')
            .select('farm_id, email')
            .eq('id', user.id)
            .single();
            
        if (!userData) return;
        
        // Buscar contas secund√°rias (emails modificados)
        const { data: secondaryAccounts, error } = await supabase
            .from('users')
            .select('*')
            .eq('farm_id', userData.farm_id)
            .or(`email.eq.${userData.email}.func,email.eq.${userData.email}.vet`);
            
        if (error) {
            console.error('‚ùå Erro ao buscar contas secund√°rias:', error);
        } else {
            console.log('üìä Contas secund√°rias encontradas:', secondaryAccounts);
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao verificar contas secund√°rias:', error);
    }
}

// Exportar fun√ß√µes
window.testSecondaryAccountCreation = testSecondaryAccountCreation;
window.checkExistingSecondaryAccounts = checkExistingSecondaryAccounts;

console.log('üß™ Script de teste de conta secund√°ria carregado!');
console.log('Comandos dispon√≠veis:');
console.log('- testSecondaryAccountCreation() - Testar cria√ß√£o de conta secund√°ria');
console.log('- checkExistingSecondaryAccounts() - Verificar contas secund√°rias existentes'); 