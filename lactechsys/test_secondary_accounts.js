/**
 * Script de teste para verificar o funcionamento das contas secund√°rias
 * Execute este script no console do navegador ap√≥s aplicar as corre√ß√µes
 */

async function testSecondaryAccounts() {
    console.log('üß™ Iniciando testes de contas secund√°rias...');
    
    try {
        // Teste 1: Verificar autentica√ß√£o
        console.log('\n1Ô∏è‚É£ Testando autentica√ß√£o...');
        const { data: { user }, error: authError } = await supabase.auth.getUser();
        
        if (authError) {
            console.error('‚ùå Erro de autentica√ß√£o:', authError);
            return;
        }
        
        if (!user) {
            console.error('‚ùå Usu√°rio n√£o autenticado');
            return;
        }
        
        console.log('‚úÖ Usu√°rio autenticado:', user.id);
        
        // Teste 2: Verificar dados do usu√°rio
        console.log('\n2Ô∏è‚É£ Testando busca de dados do usu√°rio...');
        const { data: userData, error: userError } = await supabase
            .from('users')
            .select('*')
            .eq('id', user.id)
            .single();
            
        if (userError) {
            console.error('‚ùå Erro ao buscar dados do usu√°rio:', userError);
            return;
        }
        
        console.log('‚úÖ Dados do usu√°rio carregados:', userData.name);
        
        // Teste 3: Verificar tabela secondary_accounts
        console.log('\n3Ô∏è‚É£ Testando acesso √† tabela secondary_accounts...');
        try {
            const { data: secondaryAccounts, error: secondaryError } = await supabase
                .from('secondary_accounts')
                .select('*')
                .eq('primary_account_id', user.id);
                
            if (secondaryError) {
                console.error('‚ùå Erro ao acessar secondary_accounts:', secondaryError);
            } else {
                console.log('‚úÖ Tabela secondary_accounts acess√≠vel');
                console.log('üìä Contas secund√°rias encontradas:', secondaryAccounts.length);
            }
        } catch (error) {
            console.error('‚ùå Erro ao acessar secondary_accounts:', error);
        }
        
        // Teste 4: Verificar consultas por email
        console.log('\n4Ô∏è‚É£ Testando consultas por email...');
        try {
            const { data: emailUsers, error: emailError } = await supabase
                .from('users')
                .select('*')
                .eq('email', userData.email)
                .eq('farm_id', userData.farm_id)
                .neq('id', user.id);
                
            if (emailError) {
                console.error('‚ùå Erro ao consultar por email:', emailError);
            } else {
                console.log('‚úÖ Consulta por email funcionando');
                console.log('üìä Usu√°rios com mesmo email:', emailUsers.length);
            }
        } catch (error) {
            console.error('‚ùå Erro ao consultar por email:', error);
        }
        
        // Teste 5: Verificar fun√ß√£o loadSecondaryAccountData
        console.log('\n5Ô∏è‚É£ Testando fun√ß√£o loadSecondaryAccountData...');
        try {
            await loadSecondaryAccountData();
            console.log('‚úÖ Fun√ß√£o loadSecondaryAccountData executada sem erros');
        } catch (error) {
            console.error('‚ùå Erro na fun√ß√£o loadSecondaryAccountData:', error);
        }
        
        // Teste 6: Verificar elementos DOM
        console.log('\n6Ô∏è‚É£ Testando elementos DOM...');
        const elements = [
            'secondaryAccountName',
            'secondaryAccountRole', 
            'secondaryAccountActive',
            'noSecondaryAccount',
            'hasSecondaryAccount',
            'secondaryAccountNameDisplay',
            'switchAccountBtn'
        ];
        
        let domErrors = 0;
        elements.forEach(elementId => {
            const element = document.getElementById(elementId);
            if (!element) {
                console.error(`‚ùå Elemento n√£o encontrado: ${elementId}`);
                domErrors++;
            }
        });
        
        if (domErrors === 0) {
            console.log('‚úÖ Todos os elementos DOM encontrados');
        } else {
            console.log(`‚ö†Ô∏è ${domErrors} elementos DOM n√£o encontrados`);
        }
        
        // Resumo dos testes
        console.log('\nüìã RESUMO DOS TESTES');
        console.log('==================');
        console.log('‚úÖ Autentica√ß√£o: OK');
        console.log('‚úÖ Dados do usu√°rio: OK');
        console.log('‚úÖ Tabela secondary_accounts: Testado');
        console.log('‚úÖ Consultas por email: Testado');
        console.log('‚úÖ Fun√ß√£o loadSecondaryAccountData: Testado');
        console.log('‚úÖ Elementos DOM: Verificado');
        
        console.log('\nüéâ Testes conclu√≠dos!');
        console.log('Se todos os testes passaram, o sistema deve estar funcionando corretamente.');
        
    } catch (error) {
        console.error('‚ùå Erro geral nos testes:', error);
    }
}

// Fun√ß√£o para testar cria√ß√£o de conta secund√°ria
async function testCreateSecondaryAccount() {
    console.log('\nüß™ Testando cria√ß√£o de conta secund√°ria...');
    
    try {
        // Simular dados do formul√°rio
        const testData = {
            name: 'Teste Funcion√°rio',
            role: 'funcionario',
            isActive: true
        };
        
        // Simular evento do formul√°rio
        const mockEvent = {
            preventDefault: () => {},
            target: {
                querySelector: () => ({
                    disabled: false,
                    innerHTML: 'Salvar',
                    disabled: false
                })
            }
        };
        
        // Executar fun√ß√£o de salvamento
        await saveSecondaryAccount(mockEvent);
        
        console.log('‚úÖ Teste de cria√ß√£o conclu√≠do');
        
    } catch (error) {
        console.error('‚ùå Erro no teste de cria√ß√£o:', error);
    }
}

// Fun√ß√£o para limpar dados de teste
async function cleanupTestData() {
    console.log('\nüßπ Limpando dados de teste...');
    
    try {
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) return;
        
        // Remover contas secund√°rias de teste
        const { error: deleteError } = await supabase
            .from('secondary_accounts')
            .delete()
            .eq('primary_account_id', user.id);
            
        if (deleteError) {
            console.error('‚ùå Erro ao limpar dados:', deleteError);
        } else {
            console.log('‚úÖ Dados de teste removidos');
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao limpar dados:', error);
    }
}

// Exportar fun√ß√µes para uso no console
window.testSecondaryAccounts = testSecondaryAccounts;
window.testCreateSecondaryAccount = testCreateSecondaryAccount;
window.cleanupTestData = cleanupTestData;

console.log('üß™ Script de teste carregado!');
console.log('Comandos dispon√≠veis:');
console.log('- testSecondaryAccounts() - Executar todos os testes');
console.log('- testCreateSecondaryAccount() - Testar cria√ß√£o de conta');
console.log('- cleanupTestData() - Limpar dados de teste'); 