/**
 * Script para testar se o sistema est√° funcionando ap√≥s as corre√ß√µes
 * Execute este script no console do navegador
 */

async function testSystemFunctionality() {
    console.log('üß™ Iniciando testes de funcionalidade do sistema...');
    
    try {
        // Teste 1: Verificar autentica√ß√£o
        console.log('\n1Ô∏è‚É£ Testando autentica√ß√£o...');
        const { data: { user }, error: authError } = await supabase.auth.getUser();
        
        if (authError) {
            console.error('‚ùå Erro de autentica√ß√£o:', authError);
            return;
        }
        
        if (!user) {
            console.error('‚ùå Usu√°rio n√£o autenticado');
            return;
        }
        
        console.log('‚úÖ Usu√°rio autenticado:', user.email);
        
        // Teste 2: Verificar dados do usu√°rio (consulta cr√≠tica que estava falhando)
        console.log('\n2Ô∏è‚É£ Testando consulta de dados do usu√°rio...');
        const { data: userData, error: userError } = await supabase
            .from('users')
            .select('*')
            .eq('id', user.id)
            .single();
            
        if (userError) {
            console.error('‚ùå Erro ao buscar dados do usu√°rio:', userError);
        } else {
            console.log('‚úÖ Dados do usu√°rio carregados:', userData.name);
        }
        
        // Teste 3: Verificar consulta por email (que estava causando recurs√£o)
        console.log('\n3Ô∏è‚É£ Testando consulta por email...');
        const { data: emailUser, error: emailError } = await supabase
            .from('users')
            .select('farm_id')
            .eq('email', user.email)
            .single();
            
        if (emailError) {
            console.error('‚ùå Erro ao consultar por email:', emailError);
        } else {
            console.log('‚úÖ Consulta por email funcionando:', emailUser.farm_id);
        }
        
        // Teste 4: Verificar tabela secondary_accounts
        console.log('\n4Ô∏è‚É£ Testando tabela secondary_accounts...');
        try {
            const { data: secondaryAccounts, error: secondaryError } = await supabase
                .from('secondary_accounts')
                .select('*')
                .eq('primary_account_id', user.id);
                
            if (secondaryError) {
                console.error('‚ùå Erro ao acessar secondary_accounts:', secondaryError);
            } else {
                console.log('‚úÖ Tabela secondary_accounts acess√≠vel');
                console.log('üìä Contas secund√°rias encontradas:', secondaryAccounts.length);
            }
        } catch (error) {
            console.error('‚ùå Erro ao acessar secondary_accounts:', error);
        }
        
        // Teste 5: Verificar produ√ß√£o de leite
        console.log('\n5Ô∏è‚É£ Testando produ√ß√£o de leite...');
        try {
            const { data: milkProduction, error: milkError } = await supabase
                .from('milk_production')
                .select('*')
                .limit(5);
                
            if (milkError) {
                console.error('‚ùå Erro ao acessar milk_production:', milkError);
            } else {
                console.log('‚úÖ Tabela milk_production acess√≠vel');
                console.log('üìä Registros de produ√ß√£o:', milkProduction.length);
            }
        } catch (error) {
            console.error('‚ùå Erro ao acessar milk_production:', error);
        }
        
        // Teste 6: Verificar testes de qualidade
        console.log('\n6Ô∏è‚É£ Testando testes de qualidade...');
        try {
            const { data: qualityTests, error: qualityError } = await supabase
                .from('quality_tests')
                .select('*')
                .limit(5);
                
            if (qualityError) {
                console.error('‚ùå Erro ao acessar quality_tests:', qualityError);
            } else {
                console.log('‚úÖ Tabela quality_tests acess√≠vel');
                console.log('üìä Registros de qualidade:', qualityTests.length);
            }
        } catch (error) {
            console.error('‚ùå Erro ao acessar quality_tests:', error);
        }
        
        // Teste 7: Verificar elementos DOM cr√≠ticos
        console.log('\n7Ô∏è‚É£ Testando elementos DOM...');
        const criticalElements = [
            'managerName',
            'farmNameHeader',
            'managerWelcome',
            'todayVolume',
            'qualityAverage',
            'pendingPayments',
            'activeUsers'
        ];
        
        let domErrors = 0;
        criticalElements.forEach(elementId => {
            const element = document.getElementById(elementId);
            if (!element) {
                console.error(`‚ùå Elemento n√£o encontrado: ${elementId}`);
                domErrors++;
            }
        });
        
        if (domErrors === 0) {
            console.log('‚úÖ Todos os elementos DOM cr√≠ticos encontrados');
        } else {
            console.log(`‚ö†Ô∏è ${domErrors} elementos DOM n√£o encontrados`);
        }
        
        // Resumo dos testes
        console.log('\nüìã RESUMO DOS TESTES');
        console.log('==================');
        console.log('‚úÖ Autentica√ß√£o: OK');
        console.log('‚úÖ Consulta de usu√°rio: Testado');
        console.log('‚úÖ Consulta por email: Testado');
        console.log('‚úÖ Tabela secondary_accounts: Testado');
        console.log('‚úÖ Tabela milk_production: Testado');
        console.log('‚úÖ Tabela quality_tests: Testado');
        console.log('‚úÖ Elementos DOM: Verificado');
        
        console.log('\nüéâ Testes conclu√≠dos!');
        console.log('Se todos os testes passaram, o sistema deve estar funcionando corretamente.');
        
        // Verificar se n√£o h√° mais erros 500
        console.log('\nüîç Verificando se n√£o h√° mais erros 500...');
        console.log('Recarregue a p√°gina e verifique o console para confirmar que n√£o h√° mais erros de recurs√£o infinita.');
        
    } catch (error) {
        console.error('‚ùå Erro geral nos testes:', error);
    }
}

// Fun√ß√£o para limpar console e recarregar
function resetAndTest() {
    console.clear();
    console.log('üîÑ Recarregando e testando sistema...');
    testSystemFunctionality();
}

// Exportar fun√ß√µes para uso no console
window.testSystemFunctionality = testSystemFunctionality;
window.resetAndTest = resetAndTest;

console.log('üß™ Script de teste carregado!');
console.log('Comandos dispon√≠veis:');
console.log('- testSystemFunctionality() - Executar todos os testes');
console.log('- resetAndTest() - Limpar console e executar testes'); 