/**
 * Script para testar a p√°gina do veterin√°rio ap√≥s remo√ß√£o do CRMV
 * Execute este script no console do navegador
 */

// Teste 1: Verificar se a p√°gina carrega sem erros
function testPageLoad() {
    console.log('üß™ Testando carregamento da p√°gina do veterin√°rio...');
    
    // Verificar se estamos na p√°gina correta
    if (!window.location.pathname.includes('veterinario.html')) {
        console.log('‚ÑπÔ∏è N√£o estamos na p√°gina do veterin√°rio');
        return false;
    }
    
    console.log('‚úÖ Estamos na p√°gina do veterin√°rio');
    
    // Verificar elementos essenciais
    const essentialElements = [
        'vetName',
        'vetWelcome', 
        'profileName',
        'profileFullName',
        'profileEmail2',
        'profilePhone',
        'profileSpecialty'
    ];
    
    let allElementsExist = true;
    
    essentialElements.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            console.log(`‚úÖ ${id}: Elemento encontrado`);
        } else {
            console.error(`‚ùå ${id}: Elemento n√£o encontrado`);
            allElementsExist = false;
        }
    });
    
    // Verificar se o CRMV foi removido
    const crmvElement = document.getElementById('profileCrmv');
    if (crmvElement) {
        console.error('‚ùå Campo CRMV ainda existe');
        allElementsExist = false;
    } else {
        console.log('‚úÖ Campo CRMV removido com sucesso');
    }
    
    return allElementsExist;
}

// Teste 2: Verificar se os dados s√£o carregados corretamente
async function testDataLoading() {
    console.log('üß™ Testando carregamento de dados...');
    
    try {
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) {
            console.error('‚ùå Usu√°rio n√£o autenticado');
            return false;
        }
        
        console.log('‚úÖ Usu√°rio autenticado:', user.email);
        
        // Verificar dados do usu√°rio
        const { data: userData, error } = await supabase
            .from('users')
            .select('name, email, whatsapp, role')
            .eq('id', user.id)
            .single();
            
        if (error) {
            console.error('‚ùå Erro ao buscar dados do usu√°rio:', error);
            return false;
        }
        
        console.log('‚úÖ Dados do usu√°rio carregados:', userData);
        
        // Verificar se os campos est√£o sendo preenchidos
        const profileFullName = document.getElementById('profileFullName');
        const profileEmail2 = document.getElementById('profileEmail2');
        const profilePhone = document.getElementById('profilePhone');
        
        if (profileFullName && profileFullName.textContent !== 'Carregando...') {
            console.log('‚úÖ Nome carregado:', profileFullName.textContent);
        } else {
            console.log('‚ÑπÔ∏è Nome ainda carregando...');
        }
        
        if (profileEmail2 && profileEmail2.textContent !== 'Carregando...') {
            console.log('‚úÖ Email carregado:', profileEmail2.textContent);
        } else {
            console.log('‚ÑπÔ∏è Email ainda carregando...');
        }
        
        if (profilePhone && profilePhone.textContent !== 'Carregando...') {
            console.log('‚úÖ Telefone carregado:', profilePhone.textContent);
        } else {
            console.log('‚ÑπÔ∏è Telefone ainda carregando...');
        }
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro ao testar carregamento de dados:', error);
        return false;
    }
}

// Teste 3: Verificar layout da se√ß√£o de informa√ß√µes profissionais
function testProfessionalInfoLayout() {
    console.log('üß™ Testando layout das informa√ß√µes profissionais...');
    
    // Verificar se a se√ß√£o existe
    const professionalSection = document.querySelector('h4');
    if (professionalSection && professionalSection.textContent.includes('Informa√ß√µes Profissionais')) {
        console.log('‚úÖ Se√ß√£o de informa√ß√µes profissionais encontrada');
    } else {
        console.error('‚ùå Se√ß√£o de informa√ß√µes profissionais n√£o encontrada');
        return false;
    }
    
    // Verificar campos presentes
    const expectedFields = [
        'Nome Completo',
        'Email', 
        'Telefone',
        'Especialidade',
        'Cargo'
    ];
    
    const pageText = document.body.textContent;
    let allFieldsPresent = true;
    
    expectedFields.forEach(field => {
        if (pageText.includes(field)) {
            console.log(`‚úÖ Campo "${field}" presente`);
        } else {
            console.error(`‚ùå Campo "${field}" n√£o encontrado`);
            allFieldsPresent = false;
        }
    });
    
    // Verificar se CRMV n√£o est√° presente
    if (pageText.includes('CRMV')) {
        console.error('‚ùå Campo CRMV ainda presente na p√°gina');
        allFieldsPresent = false;
    } else {
        console.log('‚úÖ Campo CRMV completamente removido');
    }
    
    return allFieldsPresent;
}

// Teste 4: Verificar funcionalidades b√°sicas
function testBasicFunctionality() {
    console.log('üß™ Testando funcionalidades b√°sicas...');
    
    // Verificar se o modal de perfil abre
    const profileButton = document.querySelector('button[onclick="openProfileModal()"]');
    if (profileButton) {
        console.log('‚úÖ Bot√£o de perfil encontrado');
    } else {
        console.error('‚ùå Bot√£o de perfil n√£o encontrado');
        return false;
    }
    
    // Verificar se as abas funcionam
    const navItems = document.querySelectorAll('.nav-item');
    if (navItems.length > 0) {
        console.log(`‚úÖ ${navItems.length} abas de navega√ß√£o encontradas`);
    } else {
        console.error('‚ùå Abas de navega√ß√£o n√£o encontradas');
        return false;
    }
    
    // Verificar se o dashboard carrega
    const dashboardElements = [
        'healthyAnimals',
        'warningAnimals', 
        'criticalAnimals',
        'activeTreatments'
    ];
    
    let dashboardElementsExist = true;
    
    dashboardElements.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            console.log(`‚úÖ Elemento do dashboard "${id}" encontrado`);
        } else {
            console.error(`‚ùå Elemento do dashboard "${id}" n√£o encontrado`);
            dashboardElementsExist = false;
        }
    });
    
    return dashboardElementsExist;
}

// Teste completo
async function runVeterinarioTest() {
    console.log('üöÄ Iniciando teste completo da p√°gina do veterin√°rio...\n');
    
    const results = {
        pageLoad: testPageLoad(),
        dataLoading: await testDataLoading(),
        layout: testProfessionalInfoLayout(),
        functionality: testBasicFunctionality()
    };
    
    console.log('\nüìä RESULTADOS DOS TESTES:');
    console.log(`‚úÖ Carregamento da p√°gina: ${results.pageLoad ? 'PASSOU' : 'FALHOU'}`);
    console.log(`‚úÖ Carregamento de dados: ${results.dataLoading ? 'PASSOU' : 'FALHOU'}`);
    console.log(`‚úÖ Layout das informa√ß√µes: ${results.layout ? 'PASSOU' : 'FALHOU'}`);
    console.log(`‚úÖ Funcionalidades b√°sicas: ${results.functionality ? 'PASSOU' : 'FALHOU'}`);
    
    const allPassed = Object.values(results).every(result => result);
    
    if (allPassed) {
        console.log('\nüéâ TODOS OS TESTES PASSARAM!');
        console.log('‚úÖ P√°gina do veterin√°rio funcionando corretamente');
        console.log('‚úÖ Campo CRMV removido com sucesso');
    } else {
        console.log('\n‚ö†Ô∏è ALGUNS TESTES FALHARAM');
        console.log('‚ùå Ainda h√° problemas na p√°gina do veterin√°rio');
    }
    
    return allPassed;
}

// Exportar fun√ß√µes
window.testPageLoad = testPageLoad;
window.testDataLoading = testDataLoading;
window.testProfessionalInfoLayout = testProfessionalInfoLayout;
window.testBasicFunctionality = testBasicFunctionality;
window.runVeterinarioTest = runVeterinarioTest;

console.log('üß™ Script de teste da p√°gina do veterin√°rio carregado!');
console.log('Comandos dispon√≠veis:');
console.log('- testPageLoad() - Testar carregamento da p√°gina');
console.log('- testDataLoading() - Testar carregamento de dados');
console.log('- testProfessionalInfoLayout() - Testar layout das informa√ß√µes');
console.log('- testBasicFunctionality() - Testar funcionalidades b√°sicas');
console.log('- runVeterinarioTest() - Executar teste completo'); 